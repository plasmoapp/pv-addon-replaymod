plugins {
    id "fabric-loom" version "1.0-SNAPSHOT"
    id "com.github.johnrengelman.shadow" version "7.1.0"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
}

sourceCompatibility = JavaLanguageVersion.of(java_version as int)
targetCompatibility = JavaLanguageVersion.of(java_version as int)

archivesBaseName = archives_base_name
version = mod_version
group = maven_group

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = "henkelmax.public"
        url = "https://maven.maxhenkel.de/repository/public"
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "plasmo-repo"
        url = "https://repo.plo.su"
    }
}

runClient.doFirst {
    args = ["--username", System.getProperty("user.name")]
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    implementation "com.google.code.findbugs:jsr305:3.0.2"

    implementation "de.maxhenkel.sonic:sonic:1.0.0-SNAPSHOT"
    shadow "de.maxhenkel.sonic:sonic:1.0.0-SNAPSHOT"

    implementation "su.plo.voice.api:client:${pv_version}"
    annotationProcessor "su.plo.voice.api:client:${pv_version}"

    compileOnly "org.projectlombok:lombok:1.18.24"
    annotationProcessor "org.projectlombok:lombok:1.18.24"

//    modImplementation "maven.modrinth:plasmo-voice:fabric-${pv_dependency}"

    modImplementation "maven.modrinth:replaymod:${minecraft_version}-2.6.9"
}

processResources {
    inputs.property "version", version
    from("LICENSE")
    filesMatching("fabric.mod.json") {
        expand "version": mod_version,
                "java_version": java_version,
                "minecraft_dependency": minecraft_dependency,
                "loader_version": loader_version,
                "pv_dependency": pv_dependency,
                "replaymod_dependency": replaymod_dependency
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = java_version as int
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
        classifier "shadow-dev"
    relocate "de.maxhenkel.sonic", "de.maxhenkel.${archives_base_name}.sonic"
}

prepareRemapJar {
    dependsOn shadowJar
}

remapJar {
    input = shadowJar.archiveFile.get()
}

curseforge {
    apiKey = file("${rootDir}/curseforge_api_key.txt").exists() ? file("${rootDir}/curseforge_api_key.txt").text : ""
    project {
        id = curse_id
        changelogType = "markdown"
        changelog = file("changelog.md")
        releaseType = release_type
        addGameVersion "Fabric"
        gameVersionStrings.addAll(curse_supported_versions.split(","))
        mainArtifact(file("${buildDir}/libs/${archivesBaseName}-${version}.jar")) {
            displayName = "[Fabric ${minecraft_display_version}] ${mod_name} ${mod_version}"
            relations {
                requiredDependency "plasmo-voice"
            }
        }
        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
    }
    options {
        forgeGradleIntegration = false
    }
}

import com.modrinth.minotaur.dependencies.ModDependency

tasks.modrinth.configure({
    group = "upload"
})

modrinth {
    token = file("${rootDir}/modrinth_token.txt").exists() ? file("${rootDir}/modrinth_token.txt").text : ""
    projectId = modrinth_id
    versionNumber = "fabric-${minecraft_display_version}-${mod_version}"
    versionName = "[Fabric ${minecraft_display_version}] ${mod_name} ${mod_version}"
    uploadFile = remapJar
    versionType = release_type.toUpperCase()
    changelog = file("changelog.md").text
    gameVersions.addAll(curse_supported_versions.split(","))
    loaders = ["fabric"]
    dependencies = [
            new ModDependency("1bZhdhsH", "required") // Plasmo Voice
    ]
}
tasks.modrinth.dependsOn(build)
